// Code generated by "bitmasker -kebab -type=ThingFlags"; DO NOT EDIT.

package mental

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the bitmasker command to generate them again.
	var x [1]struct{}
	_ = x[ThingZeroFlag-0]
	_ = x[ThingOneFlag-2]
	_ = x[ThingTwoFlag-4]
}

const (
	_ThingFlags_name_0 = "zero"
	_ThingFlags_name_1 = "one"
	_ThingFlags_name_2 = "two"
)

func (i ThingFlags) String() (value string) {
	update := func(t ThingFlags, n string) {
		if i.Has(t) {
			if len(value) > 0 {
				value += " | "
			}
			value += n
		}
	}
	update(ThingFlags(0), _ThingFlags_name_0)
	update(ThingFlags(2), _ThingFlags_name_1)
	update(ThingFlags(4), _ThingFlags_name_2)
	if value == "" {
		return "ThingFlags(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return
}

// Has returns TRUE if the given flag is present in the bitmask
func (i ThingFlags) Has(m ThingFlags) bool {
	if i == m {
		return true
	}
	return i&m != 0
}

// Set returns the bitmask with the given flag set
func (i ThingFlags) Set(m ThingFlags) ThingFlags {
	return i | m
}

// Clear returns the bitmask with the given flag removed
func (i ThingFlags) Clear(m ThingFlags) ThingFlags {
	return i &^ m
}

// Toggle returns the bitmask with the given flag toggled
func (i ThingFlags) Toggle(m ThingFlags) ThingFlags {
	return i ^ m
}
